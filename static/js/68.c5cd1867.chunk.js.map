{"version":3,"file":"static/js/68.c5cd1867.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  background: var(--white);\n  padding: 20px;\n  border-radius: 5px;\n  margin-bottom: 30px;\n`;\n","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { FormContainer } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/api';\nimport { getContacts } from 'redux/contacts/selectors';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  phone: Yup.number().min(2, 'Too Short!').required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contactNameTest = useSelector(getContacts);\n\n  const handleSubmit = (newContact, contactNameTest) => {\n    const normalizedName = newContact.name.toLowerCase();\n    let duplicatedName = contactNameTest.some(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (duplicatedName) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name: newContact.name, number: newContact.phone }));\n  };\n\n  return (\n    <FormContainer>\n      <Formik\n        initialValues={{\n          name: '',\n          phone: '',\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values, actions) => {\n          handleSubmit(values, contactNameTest);\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <div className=\"container\">\n            <label htmlFor=\"name\">Name</label>\n            <Field id=\"name\" name=\"name\" placeholder=\"Jane\" />\n            <ErrorMessage name=\"name\" />\n          </div>\n          <div className=\"container\">\n            <label htmlFor=\"phone\">Phone</label>\n            <Field\n              type=\"tel\"\n              id=\"phone\"\n              name=\"phone\"\n              placeholder=\"459-12-56XXX\"\n            />\n            <ErrorMessage name=\"phone\" />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </FormContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  background: var(--white);\n  padding: 20px;\n  border-radius: 5px;\n  margin-bottom: 30px;\n`;\n","import { Formik, Field, Form } from 'formik';\nimport { FilterContainer } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter.filter);\n  const handleChange = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <FilterContainer>\n      <p>Find contacts by name</p>\n      <Formik\n        initialValues={{\n          search: '',\n        }}\n        onSubmit={(values, actions) => {\n          console.log(values);\n        }}\n      >\n        <Form>\n          <div className=\"container\">\n            <label htmlFor=\"search\">Name</label>\n            <Field\n              id=\"search\"\n              name=\"search\"\n              placeholder=\"John Doe\"\n              value={filterValue}\n              onChange={handleChange}\n            />\n          </div>\n        </Form>\n      </Formik>\n    </FilterContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  background: var(--white);\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  border-radius: 5px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  column-gap: 15px;\n\n  p {\n    min-width: 300px;\n    margin-bottom: 0;\n  }\n`;\n","import { List, ListItem } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/api';\n\nexport const ContactList = () => {\n  /*\n  const getvisibleContacts = (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  */\n  //const contacts = useSelector(getContacts);\n  //const filter = useSelector(getFilter);\n  //const visibleContacts = getvisibleContacts(contacts, filter);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n  const handleDelete = evt => dispatch(deleteContact(evt.target.id));\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ListItem key={contact.id}>\n          <p>\n            <span>{contact.name}: </span>\n            <span>{contact.phone}</span>\n          </p>\n\n          <button\n            type=\"button\"\n            id={contact.id}\n            className=\"btn btn-outline\"\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/api';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <div className=\"card\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </div>\n    </>\n  );\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","FormContainer","styled","_templateObject","_taggedTemplateLiteral","SignupSchema","Yup","shape","min","max","required","phone","ContactForm","dispatch","useDispatch","contactNameTest","useSelector","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","normalizedName","some","alert","concat","addContact","number","handleSubmit","resetForm","_jsxs","Form","className","htmlFor","Field","id","placeholder","ErrorMessage","type","FilterContainer","Filter","filterValue","search","console","log","value","onChange","e","changeFilter","target","List","ListItem","_templateObject2","ContactList","visibleContacts","handleDelete","evt","deleteContact","map","onClick","Tasks","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}